define(["jquery","libraries/mootools-base","Logger.class","libraries/jquery.atmosphere","libraries/jquery.cookie"],function(e,t,n){var r=new t.Class({Implements:[t.Options],options:{prependUrlPrefix:!1},subsocket:{},jquery:"SocketHandler",initialize:function(t){var r=this;r.logger=new n("SocketHandler"),this.options=new e.atmosphere.AtmosphereRequest,this.setOptions({url:"/",contentType:"text/plain",logLevel:n.logLevel,transport:"websocket",fallbackTransport:"long-polling",contentType:"application/json",enableXDR:!0,rewriteURL:!0,withCredentials:!0}),this.setOptions(t),r.options.prependUrlPrefix&&(this.options.url=DOMAIN_CONFIGURATIONS.BASE_URL+this.options.url),this.setOnOpenHandler(function(e){r.logger.log("info","Atmosphere connected using "),r.logger.log("info",e.transport)}).setOnMessageHandler(function(e){r.logger.log("debug","message received "+e.responseBody)}).setOnCloseHandler(function(){r.push("closing")}).setOnErrorHandler(function(e){r.logger.log("error",e)})},subscribe:function(){return this.subsocket=e.atmosphere.subscribe(this.options,[{key:"j_username",value:e.cookie("j_username")}]),this},push:function(e){return this.subsocket.push(e),this},close:function(){return this.push("closing"),this.subsocket.close(),this},setOnOpenHandler:function(e){return this.options.onOpen=e,this},setOnCloseHandler:function(e){return this.options.onClose=e,this},setOnErrorHandler:function(e){return this.options.onError=e,this},setOnMessageHandler:function(e){return this.options.onMessage=e,this}});return r});